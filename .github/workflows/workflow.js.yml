#name: Node.js CI

####################--- Trigger ---####################

#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#  release:
#    types: [published]


####################--- Jobs ---####################

#jobs:

####################--- Build Application ---####################

#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: npm install and build webpack
#        run: |
#          npm install
#          npm run build
#      - uses: actions/upload-artifact@master
#        with:
#          name: webpack artifacts
#          path: public/

####################--- Do Some Test ---####################

#  test:
#    needs: build
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#        node-version: [10.x]

#    steps:

      ####################--- Checkout and run unit test ---####################

#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@master
#        with:
#          name: webpack artifacts
#          path: public
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{ matrix.node-version }}
#      - name: npm install, and test
#        run: |
#          npm install
#          npm test -- --collectCoverage

####################--- Push to sonar sepulsa ---####################

#      - name: Setup sonarqube
#        if: github.event_name == 'push'
#        uses: warchant/setup-sonar-scanner@v1
#      - name: Run sonar scanner
#        if: github.event_name == 'push'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}  -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}


####################--- After success build on test step, build Docker image and push to Google Cloud ---####################
####################--- Triggered on push master (merged) ---####################

#  build-push-staging:
#    if: github.event_name == 'push'
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      -   name: Checkout
#          uses: actions/checkout@v2
#      -   uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#          with:
#            version: '290.0.1'
#            service_account_key: ${{ secrets.CLOUD_SDK_KEY }}
#            project_id: innova-271008
#      -   run: gcloud container clusters get-credentials  innova-staging --zone asia-southeast1-b --project innova-271008
#      -   name: Build and push Docker images API to registry
#          uses: docker/build-push-action@v1
#          with:
#            username: ${{ secrets.REGISTRY_USERNAME }}
#            password: ${{ secrets.REGISTRY_PASSWORD }}
#            repository: ${{ secrets.IMAGE_NAME_API }}
#            registry: ${{ secrets.REGISTRY_URL }}
#            tags: latest
#            build_args: NEXT_PUBLIC_API_BASE_URL=https://url.url/url
#      -   name: Deploy
#          run: |
#            kubectl -n <product-name> set image <repository/name> name=<url-pelabuhan>/${{ secrets.IMAGE_NAME_API }}:latest
#            kubectl -n <product-name> patch <repository/name> -p "{\"spec\":{\"template\":{\"metadata\":{\"creationTimestamp\":\"$(date '+%FT%TZ')\"}}}}"


####################--- Push to prod on created github release ---####################
#  build-push-production:
#    if: github.event_name == 'release'
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      -   name: Checkout
#          uses: actions/checkout@v2
#      -   name: Build and push Docker images API to registry
#          uses: docker/build-push-action@v1
#          with:
#            username: ${{ secrets.REGISTRY_USERNAME }}
#            password: ${{ secrets.REGISTRY_PASSWORD }}
#            repository: ${{ secrets.IMAGE_NAME_API }}
#            registry: ${{ secrets.REGISTRY_URL }}
#            tags: ${{ github.event.release.tag_name }}
#            build_args: NEXT_PUBLIC_API_BASE_URL=https://url.url.url
#
#      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#        with:
#          version: '290.0.1'
#          service_account_key: ${{ secrets.CLOUD_SDK_KEY_PROD }}
#          project_id: innova-271008
#      - run: gcloud container clusters get-credentials  innova --region asia-southeast1 --project innova-271008
#      - name: Deploy
#        run: |
#          kubectl -n <product-name> set image <repository/name> name=<url-pelabuhan>>/${{ secrets.IMAGE_NAME_API }}:${{ github.event.release.tag_name }}
#          kubectl -n <product-name> patch <repository/name> -p "{\"spec\":{\"template\":{\"metadata\":{\"creationTimestamp\":\"$(date '+%FT%TZ')\"}}}}"
#
